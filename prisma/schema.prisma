// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  fullname  String    @db.VarChar(100)
  email     String    @db.VarChar(150)
  password  String    @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  projects    Project[]
  UserProject UserProject[]
}

model Project {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String    @db.MediumText
  ownerUserId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  user        User          @relation(fields: [ownerUserId], references: [id])
  Folder      Folder[]
  UserProject UserProject[]
}

model UserProject {
  id        Int @id @default(autoincrement())
  userId    Int
  projectId Int

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model Folder {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(50)
  projectId Int
  folderId  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  project  Project    @relation(fields: [projectId], references: [id])
  folder   Folder?    @relation("folderParent", fields: [folderId], references: [id])
  Folder   Folder[]   @relation("folderParent")
  TestCase TestCase[]
}

model TestCase {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar(150)
  summary       String    @db.MediumText
  preconditions String?   @db.MediumText
  testSuiteId   Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  deletedAt     DateTime?

  testSuite      Folder           @relation(fields: [testSuiteId], references: [id])
  TestCaseStatus TestCaseStatus[]
}

model TestCaseStatus {
  id         Int      @id @default(autoincrement())
  testCaseId Int
  status     String   @db.VarChar(30)
  note       String   @db.MediumText
  date       DateTime @default(now())

  testCase TestCase @relation(fields: [testCaseId], references: [id])
}
